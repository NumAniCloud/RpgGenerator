// <autogenerated />
#nullable enable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using RpgGenerator.Basic;

namespace RpgGenerator.Test.DataSource.PassiveDecorationUnitTests.Basic.Source
{
	public abstract class PassiveDecoration
	{
		public virtual Task BeforeEventAsync(DamageEvent @event) => Task.CompletedTask;
		public virtual Task AfterEventAsync(DamageEvent @event) => Task.CompletedTask;
		public virtual int ModifyAttack(int source) => source;
		public virtual int ModifyDefence(int source) => source;
	}

	public sealed class PassiveDecorationHookHandler : IPassiveDecoratorHookHandler
	{
		public Task BeforeEventAsync(IPassiveDecorationProviderBase provider, IBattleEvent @event)
			=> RunAsync(provider, p => SelectBefore(p, @event));
		
		public Task AfterEventAsync(IPassiveDecorationProviderBase provider, IBattleEvent @event)
			=> RunAsync(provider, p => SelectAfter(p, @event));

		private async Task RunAsync(IPassiveDecorationProviderBase provider, Func<PassiveDecoration, Task> selector)
		{
			if (!(provider is IPassiveDecorationProvider concreteProvider)) return;

			foreach (var passiveEffect in concreteProvider.GetPassiveDecorations())
			{
				await selector(passiveEffect);
			}
		}

		private Task SelectBefore(PassiveDecoration passive, IBattleEvent @event) => @event switch
		{
			DamageEvent ev0 => passive.BeforeEventAsync(ev0),
			_ => Task.CompletedTask,
		};

		private Task SelectAfter(PassiveDecoration passive, IBattleEvent @event) => @event switch
		{
			DamageEvent ev0 => passive.AfterEventAsync(ev0),
			_ => Task.CompletedTask,
		};
	}

	public sealed class FinalAttributes
	{
		private readonly Attributes _baseAttribute;
		private readonly IPassiveDecorationProvider _provider;

		public FinalAttributes(Attributes baseAttribute, IPassiveDecorationProvider provider)
		{
			_baseAttribute = baseAttribute;
			_provider = provider;
		}

		public int Attack => Aggregate(_baseAttribute.Attack, p => p.ModifyAttack);
		public int Defence => Aggregate(_baseAttribute.Defence, p => p.ModifyDefence);

		private T Aggregate<T>(T source, Func<PassiveDecoration, Func<T, T>> getModifier)
		{
			return _provider.GetPassiveDecorations()
				.Aggregate(source, (arg1, effect) => getModifier.Invoke(effect).Invoke(arg1));
		}
	}

	public interface IPassiveDecorationProvider : IPassiveDecorationProviderBase
	{
		IEnumerable<PassiveDecoration> GetPassiveDecorations();
	}
}