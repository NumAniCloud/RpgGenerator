// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 16.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace RpgGenerator.Generator.PassiveDecoration.Template
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class PassiveDecorationTemplate : PassiveDecorationTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("// <autogenerated />\r\n#nullable enable\r\nusing System;\r\nusing System.Threading.Tas" +
                    "ks;\r\nusing RpgGenerator.Basic;\r\n\r\nnamespace ");
            
            #line 13 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Root.SourceType.FullNamespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n");
            
            #line 15 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
	var accessibility = Root.SourceType.GetAccessibilityKeyword(); 
            
            #line default
            #line hidden
            this.Write("\t");
            
            #line 16 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(accessibility));
            
            #line default
            #line hidden
            this.Write(" sealed class ");
            
            #line 16 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Root.Decorator.DecorationName));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\r\n");
            
            #line 18 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
	foreach(var hook in Root.Decorator.BattleEvents) { 
            
            #line default
            #line hidden
            this.Write("\t\tpublic virtual Task BeforeEventAsync(");
            
            #line 19 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(hook.EventTypeName.Name));
            
            #line default
            #line hidden
            this.Write(" @event) => Task.CompletedTask;\r\n\t\tpublic virtual Task AfterEventAsync(");
            
            #line 20 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(hook.EventTypeName.Name));
            
            #line default
            #line hidden
            this.Write(" @event) => Task.CompletedTask;\r\n");
            
            #line 21 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
	} 
            
            #line default
            #line hidden
            
            #line 22 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
	foreach(var modifier in Root.Decorator.Modifiers) { 
            
            #line default
            #line hidden
            this.Write("\t\tpublic virtual ");
            
            #line 23 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modifier.AttributeType));
            
            #line default
            #line hidden
            this.Write(" Modify");
            
            #line 23 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modifier.AttributeName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 23 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modifier.AttributeType));
            
            #line default
            #line hidden
            this.Write(" source) => source;\r\n");
            
            #line 24 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
	} 
            
            #line default
            #line hidden
            this.Write("\t}\r\n\r\n\t");
            
            #line 27 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(accessibility));
            
            #line default
            #line hidden
            this.Write(" sealed class ");
            
            #line 27 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Root.Decorator.DecorationName));
            
            #line default
            #line hidden
            this.Write("HookHandler : IPassiveDecoratorHookHandler\r\n\t{\r\n\t\tpublic async Task BeforeEventAs" +
                    "ync(IPassiveEventProvider provider, IBattleEvent @event)\r\n\t\t{\r\n\t\t\tTask SelectFun" +
                    "c(PassiveEffect passive) => @event switch\r\n\t\t\t{\r\n");
            
            #line 33 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
	var i = 0; 
            
            #line default
            #line hidden
            
            #line 34 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
	foreach(var hook in Root.Decorator.BattleEvents) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t");
            
            #line 35 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(hook.EventTypeName));
            
            #line default
            #line hidden
            this.Write(" ev");
            
            #line 35 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write(" => passive.BeforeEventAsync(ev");
            
            #line 35 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write("),\r\n");
            
            #line 36 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
	i++; 
            
            #line default
            #line hidden
            
            #line 37 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
	} 
            
            #line default
            #line hidden
            this.Write(@"				_ => Task.CompletedTask,
			};

			foreach (var passiveEffect in provider.GetPassiveEffects())
			{
				await SelectFunc(passiveEffect);
			}
		}
		
		public async Task AfterEventAsync(IPassiveEventProvider provider, IBattleEvent @event)
		{
			Task SelectFunc(PassiveEffect passive) => @event switch
			{
");
            
            #line 51 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
	var i = 0; 
            
            #line default
            #line hidden
            
            #line 52 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
	foreach(var hook in Root.Decorator.BattleEvents) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t");
            
            #line 53 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(hook.EventTypeName));
            
            #line default
            #line hidden
            this.Write(" ev");
            
            #line 53 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write(" => passive.AfterEventAsync(ev");
            
            #line 53 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write("),\r\n");
            
            #line 54 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
	i++; 
            
            #line default
            #line hidden
            
            #line 55 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
	} 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t_ => Task.CompletedTask,\r\n\t\t\t};\r\n\r\n\t\t\tforeach (var passiveEffect in provider." +
                    "GetPassiveEffects())\r\n\t\t\t{\r\n\t\t\t\tawait SelectFunc(passiveEffect);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r" +
                    "\n\r\n");
            
            #line 66 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
	foreach(var attribute in Root.FinalAttribute) {  
            
            #line default
            #line hidden
            this.Write("\t");
            
            #line 67 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(accessibility));
            
            #line default
            #line hidden
            this.Write(" sealed class Final");
            
            #line 67 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.AttributeTypeName));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\r\n\t\tprivate readonly ");
            
            #line 69 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.AttributeTypeName));
            
            #line default
            #line hidden
            this.Write(" _baseAttribute;\r\n\r\n\t\tpublic Final");
            
            #line 71 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.AttributeTypeName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 71 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.AttributeTypeName));
            
            #line default
            #line hidden
            this.Write(" baseAttribute)\r\n\t\t{\r\n\t\t\t_baseAttribute = baseAttribute;\r\n\t\t}\r\n\r\n");
            
            #line 76 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
		foreach(var member in attribute.Members) { 
            
            #line default
            #line hidden
            this.Write("\t\tpublic ");
            
            #line 77 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.TypeName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 77 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.PropertyName));
            
            #line default
            #line hidden
            this.Write(" => Aggregate(_baseAttribute.");
            
            #line 77 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.PropertyName));
            
            #line default
            #line hidden
            this.Write(", p => p.Modify");
            
            #line 77 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.PropertyName));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 78 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
		} 
            
            #line default
            #line hidden
            this.Write("\r\n\t\tprivate T Aggregate<T>(T source, Func<PassiveEffect, Func<T, T>> getModifier)" +
                    "\r\n\t\t{\r\n\t\t\treturn _passiveEventProvider.GetPassiveEffects()\r\n\t\t\t\t.Aggregate(sourc" +
                    "e, (arg1, effect) => getModifier.Invoke(effect).Invoke(arg1));\r\n\t\t}\r\n\t}\r\n");
            
            #line 86 "D:\Naohiro\Documents\Repos2\Tools\RpgGenerator\RpgGenerator.Generator\PassiveDecoration\Template\PassiveDecorationTemplate.tt"
	} 
            
            #line default
            #line hidden
            this.Write("}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class PassiveDecorationTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
