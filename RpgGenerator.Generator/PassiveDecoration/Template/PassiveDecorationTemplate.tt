<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="RpgGenerator.Generator.Utilities"#>
<#@ output extension=".txt" #>
// <autogenerated />
#nullable enable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using RpgGenerator.Basic;
<#	foreach(var import in Root.GetImports()) { #>
using <#= import #>;
<#	} #>

namespace <#= Root.SourceType.FullNamespace #>
{
<#	var accessibility = Root.SourceType.GetAccessibilityKeyword(); #>
	<#= accessibility #> abstract class <#= Root.Decorator.DecorationName #>
	{
<#	foreach(var hook in Root.Decorator.Hooks) { #>
		public virtual Task BeforeEventAsync(<#= hook.EventTypeName.Name #> @event) => Task.CompletedTask;
		public virtual Task AfterEventAsync(<#= hook.EventTypeName.Name #> @event) => Task.CompletedTask;
<#	} #>
<#	foreach(var modifier in Root.Decorator.Modifiers) { #>
		public virtual <#= modifier.AttributeType #> Modify<#= modifier.AttributeName #>(<#= modifier.AttributeType #> source) => source;
<#	} #>
	}

	<#= accessibility #> sealed class <#= Root.Decorator.DecorationName #>HookHandler : IPassiveDecoratorHookHandler
	{
		public Task BeforeEventAsync(IPassiveDecorationProviderBase provider, IBattleEvent @event)
			=> RunAsync(provider, p => SelectBefore(p, @event));
		
		public Task AfterEventAsync(IPassiveDecorationProviderBase provider, IBattleEvent @event)
			=> RunAsync(provider, p => SelectAfter(p, @event));

		private async Task RunAsync(IPassiveDecorationProviderBase provider, Func<PassiveDecoration, Task> selector)
		{
			if (!(provider is <#= Root.ProviderName #> concreteProvider)) return;

			foreach (var passiveEffect in concreteProvider.GetPassiveDecorations())
			{
				await selector(passiveEffect);
			}
		}

		private Task SelectBefore(<#= Root.Decorator.DecorationName #> passive, IBattleEvent @event) => @event switch
		{
<#	var i = 0; #>
<#	foreach(var hook in Root.Decorator.Hooks) { #>
			<#= hook.EventTypeName.Name #> ev<#= i #> => passive.BeforeEventAsync(ev<#= i #>),
<#	i++; #>
<#	} #>
			_ => Task.CompletedTask,
		};

		private Task SelectAfter(<#= Root.Decorator.DecorationName #> passive, IBattleEvent @event) => @event switch
		{
<#	var j = 0; #>
<#	foreach(var hook in Root.Decorator.Hooks) { #>
			<#= hook.EventTypeName.Name #> ev<#= j #> => passive.AfterEventAsync(ev<#= j #>),
<#	j++; #>
<#	} #>
			_ => Task.CompletedTask,
		};
	}

<#	foreach(var attribute in Root.FinalAttribute) {  #>
<#		var attrName = attribute.AttributeTypeName.Name; #>
	<#= accessibility #> sealed class Final<#= attrName #>
	{
		private readonly <#= attrName #> _baseAttribute;
		private readonly <#= Root.ProviderName #> _provider;

		public Final<#= attrName #>(<#= attrName #> baseAttribute, <#= Root.ProviderName #> provider)
		{
			_baseAttribute = baseAttribute;
			_provider = provider;
		}

<#		foreach(var member in attribute.Members) { #>
		public <#= member.TypeName #> <#= member.PropertyName #> => Aggregate(_baseAttribute.<#= member.PropertyName #>, p => p.Modify<#= member.PropertyName #>);
<#		} #>

		private T Aggregate<T>(T source, Func<<#= Root.DecorationName #>, Func<T, T>> getModifier)
		{
			return _provider.GetPassiveDecorations()
				.Aggregate(source, (arg1, effect) => getModifier.Invoke(effect).Invoke(arg1));
		}
	}
<#	} #>

	<#= accessibility #> interface <#= Root.ProviderName #> : IPassiveDecorationProviderBase
	{
		IEnumerable<<#= Root.DecorationName #>> GetPassiveDecorations();
	}
}