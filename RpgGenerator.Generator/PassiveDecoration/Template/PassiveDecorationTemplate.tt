<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>
// <autogenerated />
#nullable enable
using System;
using System.Threading.Tasks;
using RpgGenerator.Basic;

namespace <#= Root.SourceType.FullNamespace #>
{
<#	var accessibility = Root.SourceType.GetAccessibilityKeyword(); #>
	<#= accessibility #> sealed class <#= Root.Decorator.DecorationName #>
	{
<#	foreach(var hook in Root.Decorator.BattleEvents) { #>
		public virtual Task BeforeEventAsync(<#= hook.EventTypeName.Name #> @event) => Task.CompletedTask;
		public virtual Task AfterEventAsync(<#= hook.EventTypeName.Name #> @event) => Task.CompletedTask;
<#	} #>
<#	foreach(var modifier in Root.Decorator.Modifiers) { #>
		public virtual <#= modifier.AttributeType #> Modify<#= modifier.AttributeName #>(<#= modifier.AttributeType #> source) => source;
<#	} #>
	}

	<#= accessibility #> sealed class <#= Root.Decorator.DecorationName #>HookHandler : IPassiveDecoratorHookHandler
	{
		public async Task BeforeEventAsync(IPassiveEventProvider provider, IBattleEvent @event)
		{
			Task SelectFunc(PassiveEffect passive) => @event switch
			{
<#	var i = 0; #>
<#	foreach(var hook in Root.Decorator.BattleEvents) { #>
				<#= hook.EventTypeName #> ev<#= i #> => passive.BeforeEventAsync(ev<#= i #>),
<#	i++; #>
<#	} #>
				_ => Task.CompletedTask,
			};

			foreach (var passiveEffect in provider.GetPassiveEffects())
			{
				await SelectFunc(passiveEffect);
			}
		}
		
		public async Task AfterEventAsync(IPassiveEventProvider provider, IBattleEvent @event)
		{
			Task SelectFunc(PassiveEffect passive) => @event switch
			{
<#	var i = 0; #>
<#	foreach(var hook in Root.Decorator.BattleEvents) { #>
				<#= hook.EventTypeName #> ev<#= i #> => passive.AfterEventAsync(ev<#= i #>),
<#	i++; #>
<#	} #>
				_ => Task.CompletedTask,
			};

			foreach (var passiveEffect in provider.GetPassiveEffects())
			{
				await SelectFunc(passiveEffect);
			}
		}
	}

<#	foreach(var attribute in Root.FinalAttribute) {  #>
	<#= accessibility #> sealed class Final<#= attribute.AttributeTypeName #>
	{
		private readonly <#= attribute.AttributeTypeName #> _baseAttribute;

		public Final<#= attribute.AttributeTypeName #>(<#= attribute.AttributeTypeName #> baseAttribute)
		{
			_baseAttribute = baseAttribute;
		}

<#		foreach(var member in attribute.Members) { #>
		public <#= member.TypeName #> <#= member.PropertyName #> => Aggregate(_baseAttribute.<#= member.PropertyName #>, p => p.Modify<#= member.PropertyName #>);
<#		} #>

		private T Aggregate<T>(T source, Func<PassiveEffect, Func<T, T>> getModifier)
		{
			return _passiveEventProvider.GetPassiveEffects()
				.Aggregate(source, (arg1, effect) => getModifier.Invoke(effect).Invoke(arg1));
		}
	}
<#	} #>
}