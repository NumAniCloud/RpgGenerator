<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="RpgGenerator.Generator.Utilities"#>
// <autogenerated />
#nullable enable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using RpgGenerator.Basic;
<#	foreach(var import in Root.GetImports()) { #>
using <#= import #>;
<#	} #>

<#
	var accessibility = Root.SourceType.GetAccessibilityKeyword();
#>
namespace <#= Root.SourceType.FullNamespace #>
{
<#	foreach(var attribute in Root.FinalAttribute) {  #>
<#		var attrName = attribute.AttributeTypeName.Name; #>
	<#= accessibility #> sealed class Final<#= attrName #>
	{
		private readonly <#= attrName #> _baseAttribute;
		private readonly <#= Root.ProviderName #> _provider;

		public Final<#= attrName #>(<#= attrName #> baseAttribute, <#= Root.ProviderName #> provider)
		{
			_baseAttribute = baseAttribute;
			_provider = provider;
		}

<#		foreach(var member in attribute.Members) { #>
<#		var name = member.PropertyName; #>
		public <#= member.TypeName #> <#= name #> => Aggregate(_baseAttribute.<#= name #>, p => p.Modify<#= name #>);
<#		} #>

		private T Aggregate<T>(T source, Func<<#= Root.DecorationName #>, Func<T, T>> getModifier)
		{
			return _provider.GetPassiveDecorations()
				.Aggregate(source, (arg1, effect) => getModifier.Invoke(effect).Invoke(arg1));
		}
	}
<#	} #>
}