<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="RpgGenerator.Generator.Utilities"#>
// <autogenerated />
#nullable enable
using System;
using System.Threading.Tasks;
using RpgGenerator.Basic;
<#	foreach(var import in Root.GetImports()) { #>
using <#= import #>;
<#	} #>

<#
	var accessibility = Root.SourceType.GetAccessibilityKeyword();
	var domain = Root.DomainContextName;
#>
namespace <#= Root.SourceType.FullNamespace #>
{
	<#= accessibility #> abstract class <#= Root.Decorator.DecorationName #>
	{
<#	foreach(var hook in Root.Decorator.Hooks) { #>
		public virtual Task BeforeEventAsync(<#= hook.EventTypeName.Name #> @event, <#= domain #> domain) => Task.CompletedTask;
		public virtual Task AfterEventAsync(<#= hook.EventTypeName.Name #> @event, <#= domain #> domain) => Task.CompletedTask;
<#	} #>
<#	foreach(var modifier in Root.Decorator.Modifiers) { #>
		public virtual <#= modifier.AttributeType #> Modify<#= modifier.AttributeName #>(<#= modifier.AttributeType #> source) => source;
<#	} #>
	}
}