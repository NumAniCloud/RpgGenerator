<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="RpgGenerator.Generator.Utilities"#>
// <autogenerated />
#nullable enable
using System;
using System.Threading.Tasks;
<#	foreach(var import in Root.GetImports()) { #>
using <#= import #>;
<#	} #>

<#
	var battleEvent = "IBattleEvent";
	var domain = Root.DomainContextName;
	var passiveType = Root.Decorator.DecorationName;
	var accessibility = Root.SourceType.GetAccessibilityKeyword();
#>
namespace <#= Root.SourceType.FullNamespace #>
{
	<#= accessibility #> sealed class <#= passiveType #>HookHandler
	{
		private readonly <#= domain #> _domain;

		public <#= passiveType #>(<#= domain #> domain)
		{
			_domain = domain;
		}

		public Task BeforeEventAsync(<#= battleEvent #> @event)
			=> RunAsync(@event.PassiveProcessSubject, p => SelectLeadingTask(p, @event));
		
		public Task AfterEventAsync(<#= battleEvent #> @event)
			=> RunAsync(@event.PassiveProcessSubject, p => SelectFollowingTask(p, @event));

		private async Task RunAsync(<#= Root.ProviderName #> provider, Func<<#= passiveType #>, Task> selector)
		{
			foreach (var passiveEffect in provider.GetPassiveDecorations())
			{
				await selector(passiveEffect);
			}
		}

		private Task SelectLeadingTask(<#= passiveType #> passive, <#= battleEvent #> @event)
			=> @event switch
			{
<#	var i = 0; #>
<#	foreach(var hook in Root.Decorator.Hooks) { #>
				<#= hook.EventTypeName.Name #> ev<#= i #> => passive.BeforeEventAsync(ev<#= i #>, _domain),
<#	i++; #>
<#	} #>
				_ => Task.CompletedTask,
			};

		private Task SelectFollowingTask(<#= passiveType #> passive, <#= battleEvent #> @event)
			=> @event switch
			{
<#	var j = 0; #>
<#	foreach(var hook in Root.Decorator.Hooks) { #>
				<#= hook.EventTypeName.Name #> ev<#= j #> => passive.AfterEventAsync(ev<#= j #>, _domain),
<#	j++; #>
<#	} #>
				_ => Task.CompletedTask,
			};
	}
}